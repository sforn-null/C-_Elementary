//#include<iostream>
//using namespace std;
////C语言中，结构体中只能定义变量，在C++中，
////结构体内不仅可以定义变量，也可以定义函数
//
////定义类
////类里面可以定义:1、成员变量  2、成员函数
////class Person
////{
////	void Print()
////	{
////
////	}
////
////	char _name[10];
////	int _age;
////	//...
////};
//
//class Student
//{
//	//访问限定符分为公有的和私有的和保护的
//public:
//	void ShowInfo()
//	{
//		cout << _name << endl;
//		cout << _age << endl;
//		cout << _stuid << endl;
//	}
//	
//private:     //一般情况下成员变量都是比较隐私的，都会定义成成员变量
//	char _name[20];
//	int _age;
//	int _stuid;
//};
//
//
////C++ 中class和struct都可以用来定义类
////class默认为private  struct默认为public
//int main()
//{
//	//公共和私有的区别
//	Student s1;
//	//s1.age; 私有的外面访问不了
//}

////定义一个数据结构栈的类
//// 
////封装
////1、将数据和方法放到定义一起。
////2、把想给你看到的数据给你看，不能给你看的封装起来。
////   用访问限定符来实现
//class Stack
//{
//public:
//	void Init(size_t n);
//	void Destory();
//	void Push()//在类里面定义
//	{
//		//...
//	}
//	void Pop();
//	void Top();
//private:
//	int* _a;
//	size_t _top;
//	size_t _capacity;
//};
//
////类里面声明，类外面定义
//void Stack::Pop()
//{
//	//...
//}
//
////1.声明和定义的区别？声明是一种承诺，承诺要干嘛，但是还没做，
////定义就是把这个事落地了
//
//int main()
//{
//	//类实例化出对象，相当于定义出了类的成员变量
//	Stack s1;
//	Stack s2;
//	Stack s3;
//	//s1._a = nullptr;//是访问不了私有额
//	s1.Push();
//
//	//对象中只存储成员变量，不存储成员函数
//	//因为一个类可以实例化出N个对象，
//	//每个对象的成员变量都可以存储不同的值，
//	//但是调用的函数却是同一个
//	//如果每个对象都存储成员函数，那么每个都相同会浪费很多空间
//	//因此放在公共代码区了
//
//	//那么如何计算一个类实例化出的对象大小，
//	//那么只需要计算成员变量之和，并且考虑内存对齐
//	//没有成员变量的类大小是1
//
//	return 0;
//}